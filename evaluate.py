# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'evaluate.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import sqlite3
class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(557, 507)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(80, 20, 421, 20))
        self.label.setStyleSheet("font: 14pt \"MS Shell Dlg 2\";")
        self.label.setObjectName("label")
        self.c1 = QtWidgets.QComboBox(Form)
        self.c1.setGeometry(QtCore.QRect(60, 80, 181, 22))
        self.c1.setObjectName("c1")
        self.c2 = QtWidgets.QComboBox(Form)
        self.c2.setGeometry(QtCore.QRect(330, 80, 191, 22))
        self.c2.setObjectName("c2")
        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(40, 170, 501, 261))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.l1 = QtWidgets.QListWidget(self.horizontalLayoutWidget)
        self.l1.setObjectName("l1")
        self.horizontalLayout_2.addWidget(self.l1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.l2 = QtWidgets.QListWidget(self.horizontalLayoutWidget)
        self.l2.setObjectName("l2")
        self.horizontalLayout_2.addWidget(self.l2)
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(50, 140, 61, 16))
        self.label_2.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(310, 140, 47, 13))
        self.label_3.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";")
        self.label_3.setObjectName("label_3")
        self.points = QtWidgets.QLabel(Form)
        self.points.setGeometry(QtCore.QRect(370, 140, 47, 13))
        self.points.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";")
        self.points.setObjectName("points")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(190, 450, 191, 31))
        self.pushButton.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";")
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.calculatescore)
        self.c2.addItem("match1")
        self.c2.addItem("match2")
        self.c2.addItem("match3")
        self.c2.addItem("match4")
        self.c2.addItem("match5")
        self.c2.addItem("match6")
        conn = sqlite3.connect('mycircket.db')
        sql="select name from teams"
        cur=conn.execute(sql)
        teams=[]
        for row in cur:
            self.c1.addItem(row[0])
        
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
    def calculatescore(self):
        totalpoints = 0
        circket = sqlite3.connect('mycircket.db')
        team = self.c1.currentText()
        self.l1.clear()
        self.l2.clear()
        s = "select players from teams where name='"+team+"'"
        
        cur=circket.execute(s)
        row=cur.fetchone()
        selected=row[0].split(',')
        
        self.l1.addItems(selected)
    
        for i in selected:
            
            c = "select ctg from stats where player='"+i+"';"
            cur=circket.execute(c)
            row=cur.fetchone()
            for j in row:
                if j=='BAT':
                    print(i)
                    self.batpoints(i)
                if j=='BWL':
                    print(i)
                    self.bowlpoints(i)
                if j=='AR':
                    print(i)
                    self.allrounder(i)
                if j=='WK':
                    print(i)
                    self.wicketpoints(i)
        count=self.l2.count()
        
        selected=[]
        for i in range(count):
            selected.append(self.l2.item(i).text())
        for points in selected:
            totalpoints = totalpoints + int(points)
        self.points.setText(str(totalpoints))
    def allrounder(self, item):
        circket = sqlite3.connect('mycircket.db')
        points = 0
        wk = "select wkts from match1 where player='"+item+"';"
        cur=circket.execute(wk)
        row=cur.fetchone()
        for wk in row:
            points = points + 10*wk
        if 3<=wk<6:
            points = points + 5
        if 6<=wk<9:
            points = points + 10
        if wk>=9:
            points = points + 15
        if 10>wk>=5:
            points = points + 10
        if wk>=10:
            points = points + 20
        bow = "select bowled from match1 where player='"+item+"';"
        cur=circket.execute(bow)
        row=cur.fetchone()
        for bow in row:
            bow = bow/6
        g = "select given from match1 where player='"+item+"';"
        cur=circket.execute(g)
        row=cur.fetchone()
        for g in row:
            if g>0:
                eco = g/bow
                if 3.5<eco<4.5:
                    points = points + 4
                if 2<eco<3.5:
                    points = points + 7
                if eco<2:
                    points = points + 10
        sc = "select scored from match1 where player='"+item+"';"
        cur=circket.execute(sc)
        row=cur.fetchone()
        for sc in row:
            points = points + sc/2
        faced = "select scored from match1 where player='"+item+"';"
        cur=circket.execute(faced)
        row=cur.fetchone()
        for faced in row:
            strik = sc/faced
        if 80<sc<100:
            points = points + 2
        if strik>100:
            points = points + 4
         
        if 100<points>=50:
            points = points + 5
        if points>=100:
            points = points + 10
        
        f = "select fours from match1 where player='"+item+"';"
        cur=circket.execute(f)
        row=cur.fetchone()
        for f in row:
            points = points + f*1
        s = "select sixes from match1 where player='"+item+"';"
        cur=circket.execute(s)
        row=cur.fetchone()
        for s in row:
            points = points + s*2
        c = "select catches from match1 where player='"+item+"';"
        cur=circket.execute(c)
        row=cur.fetchone()
        for c in row:
            points = points + c*10
        s = "select stumping from match1 where player='"+item+"';"
        cur=circket.execute(s)
        row=cur.fetchone()
        for s in row:
            points = points + s*10
        ro = "select ro from match1 where player='"+item+"';"
        cur=circket.execute(ro)
        row=cur.fetchone()
        for ro in row:
            points = points + ro*10
        print(points)
        p = int(points)
        self.l2.addItem(str(p))
        
    def wicketpoints(self, item):
        points = 0
        circket = sqlite3.connect('mycircket.db')
        c = "select catches from match1 where player='"+item+"';"
        cur=circket.execute(c)
        row=cur.fetchone()
        for c in row:
            points = points + c*10
        s = "select stumping from match1 where player='"+item+"';"
        cur=circket.execute(s)
        row=cur.fetchone()
        for s in row:
            points = points + s*10
        ro = "select ro from match1 where player='"+item+"';"
        cur=circket.execute(ro)
        row=cur.fetchone()
        for ro in row:
            points = points + ro*10
        print(points)
        p = int(points)
        self.l2.addItem(str(p))

    def bowlpoints(self, item):
        circket = sqlite3.connect('mycircket.db')
        points = 0
        wk = "select wkts from match1 where player='"+item+"';"
        cur=circket.execute(wk)
        row=cur.fetchone()
        for wk in row:
            points = points + 10*wk
        if 3<=wk<6:
            points = points + 5
        if 6<=wk<9:
            points = points + 10
        if wk>=9:
            points = points + 15
        if 10>wk>=5:
            points = points + 10
        if wk>=10:
            points = points + 20
        bow = "select bowled from match1 where player='"+item+"';"
        cur=circket.execute(bow)
        row=cur.fetchone()
        for bow in row:
            bow = bow/6
        g = "select given from match1 where player='"+item+"';"
        cur=circket.execute(g)
        row=cur.fetchone()
        for g in row:
            eco = g/bow
        if 3.5<eco<4.5:
            points = points + 4
        if 2<eco<3.5:
            points = points + 7
        if eco<2:
            points = points + 10
        c = "select catches from match1 where player='"+item+"';"
        cur=circket.execute(c)
        row=cur.fetchone()
        for c in row:
            points = points + c*10
        s = "select stumping from match1 where player='"+item+"';"
        cur=circket.execute(s)
        row=cur.fetchone()
        for s in row:
            points = points + s*10
        ro = "select ro from match1 where player='"+item+"';"
        cur=circket.execute(ro)
        row=cur.fetchone()
        for ro in row:
            points = points + ro*10
        print(points)
        p = int(points)
        self.l2.addItem(str(p))
        


        
    def batpoints(self, item):
        circket = sqlite3.connect('mycircket.db')
        points = 0
        sc = "select scored from match1 where player='"+item+"';"
        cur=circket.execute(sc)
        row=cur.fetchone()
        for sc in row:
            points = points + sc/2
        faced = "select scored from match1 where player='"+item+"';"
        cur=circket.execute(faced)
        row=cur.fetchone()
        for faced in row:
            strik = sc/faced
        if 80<sc<100:
            points = points + 2
        if strik>100:
            points = points + 4
         
        if 100<points>=50:
            points = points + 5
        if points>=100:
            points = points + 10
        
        f = "select fours from match1 where player='"+item+"';"
        cur=circket.execute(f)
        row=cur.fetchone()
        for f in row:
            points = points + f*1
        s = "select sixes from match1 where player='"+item+"';"
        cur=circket.execute(s)
        row=cur.fetchone()
        for s in row:
            points = points + s*2
        c = "select catches from match1 where player='"+item+"';"
        cur=circket.execute(c)
        row=cur.fetchone()
        for c in row:
            points = points + c*10
        s = "select stumping from match1 where player='"+item+"';"
        cur=circket.execute(s)
        row=cur.fetchone()
        for s in row:
            points = points + s*10
        ro = "select ro from match1 where player='"+item+"';"
        cur=circket.execute(ro)
        row=cur.fetchone()
        for ro in row:
            points = points + ro*10
        print(points)
        p = int(points)
        self.l2.addItem(str(p))
        
            
        

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "Evaluate The Performance of Your Fantasy Game"))
        self.label_2.setText(_translate("Form", "Players"))
        self.label_3.setText(_translate("Form", "Points"))
        self.points.setText(_translate("Form", "####"))
        self.pushButton.setText(_translate("Form", "Calculate Score"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
